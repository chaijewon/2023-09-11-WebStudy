<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
     1. SQL문장을 저장하는 공간 => SqlSessionFactory => SQL문장을 찾아준다 
        => 라이브러리는 자바소스를 변경할 수 없다 (변경,요청 => XML)
           => Spring / MyBatis
           => 웹 => 톰캣 (server.xml , web.xml)
     2. mapper는 기본은 table당 한개씩 생성 
        Config는 1개만 존재 => 공통 
         => VO등록 , mapper를 등록 , 오라클 연결
     3. mapper 
        => <select id="" resultType="int" parameterType="">
                 =======    ==========      ===========
                                            | ?에 값을 주입
                            | sql문장 실행후에 받는 변수
                              ~VO , String , int ...
           SELECT COUNT(*) FROM table_name
            => resultType="int"
           SELECT pwd FROM table_name
            => resultType="string"
           SELECT count(*),avg(sal),sum(sal) FROM table_name
            => resultType="hashmap"
                 구분자 (중복허용이 안됨)
                 
           WHERE name=?
           ps.setString(1,"")
           paramterType="string"
           
           WHERE name=? AND id=? => VO , hashmap
           
           => VO에 설정된 변수 = 컬럼명이 같은 경우에는 설정
           => JOIN/SubQuery 
              => <resultMap>
      4. ?에 값을 채우는 경우 
        #{} , ${} => ''없다(테이블명,컬럼명)
                     "FROM ${tab} 
        === 문자열 ''
        === {} ==> map => map.get(id") #{name} => map.get("name")
                   vo  => vo.getXxx() #{name} => vo.getName()
      5. 추가 
         <insert> => resultType속성이 없다 
                     parameterType => ?에 값을 채워준다 
         => 자동 증가번호 
            <selectKey> , 서브쿼리 , 시퀀스 
      6. <update> , <delete> 
      7. 복잡한 긴 SQL문장이 여러번 반복할 경우 
         <sql> => <include>
      8. <foreach collection="배열,list" item=""> => IN , 검색
      9. <trim> 
          prefix : 접두어 => 앞에 추가 => OR , AND , (
          suffix : 접미어 => OR , AND , )
          
          prefixOverrides="OR"  => 제거
          suffixOverrides  => 제거 
          => name / subject
          WHERE
          <if test="column==name">
            name LIKE ...
          </if>
          <if test="column==subject">
           OR subject LIKE ...
          </if>
          <if test="column==content">
           OR content LIKE ...
          </if>
      =================================
      10. <if test="">
      11. <choose> 
           <when test=""></when>
           <when test=""></when>
           <otherwise></otherwise>
          </choose>
      ================================ JSTL동일 
      12. <where> 
          <set> 
      13. 조인, 서브쿼리 ==> 
           기본 : table당 VO는 한개 사용  ==> VO를 포함해서 사용
                 => 포함 / 단독 ...
                 
                 
      ==> MyBatis => 데이터베이스 연결 라이브러리
                     ====================== ORM   
 -->
<mapper namespace="com.sist.dao.music-mapper">
  
  <select id="musicFindData" resultType="MusicVO" parameterType="hashmap">
    SELECT no,title,singer,poster,state,album,idcrement
    FROM genie_music
    WHERE 
    <trim prefixOverrides="OR"> 
      <!-- 
          for(String fs:fsArr)
               item      collection
               
          prefixOverrides: 제거 / suffixOverrides
          prefix:추가 / suffix
       -->
      <foreach collection="fsArr" item="fs">
       <trim prefix="OR">
	    <choose> <!-- 다중 조건문 -->
	     <!-- 인식 '' => 비교시에 정수로 변환 =>  문자열 변환 -->
	     <when test="fs=='T'.toString()">
	      title LIKE '%'||#{ss}||'%'
	     </when>
	     <when test="fs=='S'.toString()">
	      singer LIKE '%'||#{ss}||'%'
	     </when>
	     <when test="fs=='A'.toString()">
	      album LIKE '%'||#{ss}||'%'
	     </when>
	     <!-- <otherwise> -->
	    </choose>
	    </trim>
	   </foreach>
    </trim>
  </select>
</mapper>